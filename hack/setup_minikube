#!/usr/bin/env bash

set -e

### constants ##################################################################

this_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
bin_path="$this_path/bin"

### configuration ##############################################################

: ${HOST_OS:="$OSTYPE"}
: ${KUBERNETES_VERSION:="1.11.7"}

: ${MINIKUBE_VERSION:="1.0.0"}
: ${MINIKUBE_CPUS:=$(($(getconf _NPROCESSORS_ONLN) / 2))} # half of the cores
: ${MINIKUBE_MEM_MB:="10192"}
: ${MINIKUBE_DISKSIZE:="50g"}

### functions ##################################################################

ensure_prerequisites_or_exit() {
    if [[ $HOST_OS == darwin* ]] ; then
        HOST_OS="darwin"
    elif [[ $HOST_OS == linux-gnu ]] ; then
        HOST_OS="linux"
    else
        exit_with_error "Your system '$HOST_OS' is not supported."
    fi

    if ! which vboxmanage >/dev/null ; then
        echo "Please install VirtualBox."
        echo "  On OS X, you can use Homebrew cask in terminal by running:"
        echo ""
        echo "  brew cask install virtualbox"
        echo ""
        echo "  For other systems, see:"
        echo "  https://www.virtualbox.org/wiki/Downloads"
        exit 127
    fi

    if ! which kubectl >/dev/null ; then
        if ! which brew >/dev/null ; then
            echo "You are not using Homebrew/Linuxbrew."
            echo
            echo "You can also install kubectl for your OS according to"
            echo "  https://kubernetes.io/docs/tasks/tools/install-kubectl/"
            echo ""
            echo "Make sure `kubectl` is then available in your PATH."
            exit 127
        fi
        brew install kubernetes-cli
    fi
}

exit_with_error() {
    local message="$1"

    echo "Error: $message"
    exit 1
}

setup_minikube() {
    if [ -x "$bin_path/minikube" ] ; then
        export PATH="$bin_path:$PATH"
    fi

    if ! which minikube >/dev/null; then
        local minikube_rel_url="https://github.com/kubernetes/minikube/releases/download/v$MINIKUBE_VERSION/minikube-$HOST_OS-amd64"

        echo "Downloading minikube $MINIKUBE_VERSION for $HOST_OS..."
        curl -L -s "$minikube_rel_url" -o "$bin_path/minikube" || \
        wget -q "$minikube_rel_url" -O "$bin_path/minikube"
        chmod +x "$bin_path/minikube"
        echo "Done. You can put this in your .bashrc or .zshrc:"
        echo ""
        echo "export PATH=\$PATH:$bin_path"
        echo ""
        export PATH="$bin_path:$PATH"
    fi
}

### main #######################################################################

ensure_prerequisites_or_exit
setup_minikube

if ! minikube status &>/dev/null ; then
    minikube config set WantReportErrorPrompt false
    trap "minikube delete & &>/dev/null" SIGINT SIGTERM ERR
    minikube start \
      --vm-driver=virtualbox \
      --cpus="$MINIKUBE_CPUS" --memory="$MINIKUBE_MEM_MB" \
      --disk-size="$MINIKUBE_DISKSIZE" \
      --kubernetes-version="v$KUBERNETES_VERSION"
    trap - SIGINT SIGTERM ERR
fi
